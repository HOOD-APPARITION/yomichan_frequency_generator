#copyright 2020 Artour
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#Script that takes in a tab seperated frequency list (such as the output from certain analyzers using kuromoji or mecab) and outputs a frequency list that can be read by yomichan.

import os.path
import json
import csv
import argparse
from zipfile import ZipFile


#Adds the arguments that the program needs.
parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input",help = "Input file to analyze.  This can be the output from an analyzer that has number of occurences in the first column, and the word in the second column (such as Wareya's).  The word_freq_report.txt from Morphman's readability analyzer will also work. frequency.txt generated by morphman will NOT work.", required = True)
parser.add_argument("-title","--title", help = "Name of the yomichan frequency list", required = True)
parser.add_argument("-occurence", "--occurences",  action = "store_true", help = "Creates yomichan list that shows the number of occurences rather than word rank.  Default shows word rank.")
args = parser.parse_args()
frequency_file = args.input
title = args.title
count_occurences = args.occurences


print("Processing " + frequency_file + '...')
#Opens the given file and takes the counts/ranks and words
freq =[]
if count_occurences == True:
    #Uses number of occurences in data set as the number shown in yomichan
    with open(frequency_file,'r',encoding='utf-8') as file:
        reader = csv.reader(file, delimiter="\t", quotechar='"')
        for row in reader:
            freq.append([row[1] , "freq", row[0]] ) 
else:
    #Uses rank of word (1 being most common) in data set as the number shown in yomichan.  This is the default
    with open(frequency_file,'r',encoding='utf-8') as file:
        i = 1
        reader  = csv.reader(file,delimiter="\t", quotechar='"')
        for row in reader:
            freq.append([row[1] , "freq", i])
            i = i+1



#Generates the archive and creates the json files within the archive.
json_string = json.dumps(freq)
#with open("output.json", 'w', encoding='utf-8') as f:
#    json.dump(freq, f, ensure_ascii=False)
if os.path.isfile(title+".zip"):
    print(title+".zip already exists.  Please move/delete the file or use another title.")
else:
    with ZipFile(title + ".zip",'w') as yomichan_zip:
        index_str = '{' + f'"title":"{title}","format":3,"revision":"frequency1"' + '}'
        yomichan_zip.writestr("index.json",index_str)
        yomichan_zip.writestr("term_meta_bank_1.json",json.dumps(freq))
        print("Success! " + title + ".zip was successfully generated.")
